/*** Licensed under the KARMA v.1 Law of Sharing. As others have shared freely to you, so shall you share freely back to us.* If you shall try to cheat and find a loophole in this license, then KARMA will exact your share,* and your worldly gain shall come to naught and those who share shall gain eventually above you.* In compliance with previous GPLv2.0 works of Jorg Janke, Low Heng Sin, Carlos Ruiz and contributors.* This Module Creator is an idea put together and coded by Redhuan D. Oon (red1@red1.org)*/package org.bm.model;

import java.math.BigDecimal;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;
import java.util.Properties;import org.compiere.model.MInOut;import org.compiere.model.MInOutLine;import org.compiere.model.MOrder;import org.compiere.model.MOrderLine;import org.compiere.model.MWarehouse;import org.compiere.model.Query;import org.compiere.util.DB;import org.compiere.util.Env;

public class MBM_OrderManagementLine extends X_BM_OrderManagementLine{

	private static final long serialVersionUID = -1L;

	public MBM_OrderManagementLine(Properties ctx, int id, String trxName) {
		super(ctx,id,trxName);
		}

	public MBM_OrderManagementLine(Properties ctx, ResultSet rs, String trxName) {
		super(ctx, rs, trxName);
	}		protected boolean beforeSave (boolean newRecord)	{		if (getM_Product_ID()<1) 			return true;		if (getLineNo()<20){			setAvailable(getJobQtyOnHand(getM_Product_ID(), getM_AttributeSetInstance_ID(), get_TrxName()));			setBackOrders(getBackOrders(getM_Product_ID()));		}		//	Get Line No		if (getLineNo() == 0)		{			String sql = "SELECT COALESCE(MAX(LineNo),0)+20 FROM BM_OrderManagementLine WHERE BM_OrderManagement_ID=?";			int ii = DB.getSQLValue (get_TrxName(), sql, getBM_OrderManagement_ID());			if (ii==20)				ii = 1;			setLineNo (ii);		}		return true;	}		private String getBackOrders(int m_Product_ID) { 		String docnostring = "";		List<MOrderLine> olines = new Query(Env.getCtx(),MOrderLine.Table_Name,MOrderLine.COLUMNNAME_M_Product_ID+"=?",get_TrxName())				.setParameters(m_Product_ID)				.setOnlyActiveRecords(true)				.setClient_ID()				.list();		MOrder order = null;		StringBuilder backorders = new StringBuilder();		int bocnt = 0;		for (MOrderLine oline:olines){			if (order==null || order.get_ID()!=oline.getC_Order_ID()){				order = (MOrder) oline.getC_Order();				if (!order.getDocStatus().equals(MOrder.DOCSTATUS_Completed))					continue;				if (backorders.length()>0)					backorders=backorders.append(docnostring+" "+bocnt+" ");				docnostring=order.getDocumentNo()+":";				bocnt=0;			}			MInOutLine ioline = new Query(Env.getCtx(),MInOutLine.Table_Name,MInOutLine.COLUMNNAME_C_OrderLine_ID+"=?",get_TrxName())					.setParameters(oline.get_ID())					.first(); 			if (ioline!=null && ioline.getM_InOut().getDocStatus().equals(MInOut.DOCSTATUS_Completed))				continue; 			bocnt+=oline.getQtyOrdered().intValue();		}		backorders=backorders.append(docnostring+" "+bocnt+" ");		return backorders.toString();	}	private String getJobQtyOnHand(int M_Product_ID,int M_AttributeSetInstance_ID, String trxName) { 		int onHand=0;		StringBuilder available = new StringBuilder();		List<MWarehouse> whses = new Query(Env.getCtx(),MWarehouse.Table_Name,"",null)				.setOrderBy(MWarehouse.COLUMNNAME_Updated)				.list();		for (int i=0;i<whses.size();i++){			onHand=0;			MWarehouse whse = whses.get(i);			StringBuilder sql = new StringBuilder();			sql.append(" SELECT SUM(QtyOnHand) FROM M_StorageOnHand oh JOIN M_Locator loc ON (oh.M_Locator_ID=loc.M_Locator_ID)")				.append(" WHERE oh.M_Product_ID=? AND loc.M_Warehouse_ID=?");			ArrayList<Object> params = new ArrayList<Object>();			params.add(M_Product_ID);			params.add(whse.get_ID()); 			// With ASI			if (M_AttributeSetInstance_ID != 0) {				sql.append(" AND oh.M_AttributeSetInstance_ID=?");				params.add(M_AttributeSetInstance_ID);			}			BigDecimal qty = DB.getSQLValueBD(trxName, sql.toString(), params);			if (qty == null)				continue;			onHand+=qty.intValue(); 			if (i<whses.size()){				available=available.append(whse.getValue()+":"+onHand+" ");			}			}		return available.toString();	}
}
